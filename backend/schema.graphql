type User {
  _id: ID!
  user_id: String!
  name: String!
  phone: String!
  address: String!
  dob: GraphQLDate!

  email: String!
  username: String!
  membership_num: String!
  password: String!
  member_plan: String!
}

type Time {
  _id: ID!
  room_num: String
  booking_date_time: String
  room_booked: Boolean
  booked_by: String
}
type Cart {
  _id: ID!
  book_id: Int
  membership_num: String
}
type CartItem {
  _id: ID!
  book_id: Int
  membership_num: String
  bookDetails: Book
}
scalar GraphQLDate
scalar Upload


type UserAuthData {
  user: User
  webToken: String!
}

type Time {
  _id: ID!
  room_num: String
  booking_date_time: String
  room_booked: Boolean
  booked_by: String
}

type Book {
    _id: ID!
    book_id: Int
    book_name: String
    book_author: String
    book_genre: String
    book_shortDescription: String
    book_longDescription: String
    book_image_url:String
}

type UserMemberPlan {
  _id: ID!
  membership_num: String!
  purch_email: String!
  card_num: String!
  card_expire: String!
  card_cvv: String!
  purch_city: String!
  purch_postal: String!
  member_plan: String!
}

scalar GraphQLDate

input UserInputs {
  name: String!
  phone: String!
  address: String!
  dob: GraphQLDate!

  email: String!
  password: String!
  cnfPassword: String!
}

input TimeSlotInputs {
  room_num: String
  booking_date_time: String
  room_booked: Boolean
  booked_by: String
}

input UserCredInput {
  username: String!
  password: String!
}

input BookedRoomInput {
  booking_date: String!
  booked_by: String!
}

input BookInput {
  book_id: Int!
  book_name: String!
  book_author: String!
  book_genre: String!
  book_shortDescription: String!
  book_longDescription: String!
  book_image_url: String
}

input userUpdateInputs{
    user_id: String
    name: String
    phone: String
    address: String
    dob: GraphQLDate

    email: String
    username: String
    membership_num: String
}

input userMemberPlanInputs{
  purch_email: String!
  card_num: String!
  card_expire: String!
  card_cvv: String!
  purch_city: String!
  purch_postal: String!
  member_plan: String!
  membership_num: String!
}


type Query {
  getUser(userCred: UserCredInput!): UserAuthData!
  getBookedRoomInfo(bookedRoom: BookedRoomInput!): [Time]
  BookList: [Book]
  getBook(book_id: Int!): Book
  CartItems: [CartItem]
  getUserProfile(user_id: String!): User!

}

type Mutation {
  userAdd(user: UserInputs!): User!
  timeAdd(timeSlot: TimeSlotInputs!): Time!
  addBook(book: BookInput!): Response!
  updateBook(book: BookInput!): Response!

  addToCart(book_id: Int!): Cart!
  bookDelete(book_id:ID!):Boolean!
  clearCart:Boolean!

  userProfileUpdate(user_id: String!, updates: userUpdateInputs!): User
  UpdateUserMembershipPlan(planInfo: userMemberPlanInputs!): UserMemberPlan!
}


type Response {
  success: Boolean!
  message: String!
}


